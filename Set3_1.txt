import org.cloudbus.cloudsim.*;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.provisioners.BwProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.PeProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.RamProvisionerSimple;
import java.util.*;
public class exam2 {
public static void main(String[] args) {
try {
// Step 1: Initialize CloudSim
int numUsers = 1; // Number of cloud users
Calendar calendar = Calendar.getInstance();
boolean traceFlag = false; // Disable event tracing
CloudSim.init(numUsers, calendar, traceFlag);
// Step 2: Create Datacenters
Datacenter datacenter0 = createDatacenter("Datacenter_0");
Datacenter datacenter1 = createDatacenter("Datacenter_1");
// Step 3: Create Broker
DatacenterBroker broker = createBroker();
int brokerId = broker.getId();
// Step 4: Create VMs and Cloudlets and submit to broker
List<Vm> vmList = createVMs(brokerId, 5); // 5 VMs
broker.submitVmList(vmList);
List<Cloudlet> cloudletList = createCloudlets(brokerId, 10); // 10 Cloudlets
broker.submitCloudletList(cloudletList);
// Step 5: Start the simulation
CloudSim.startSimulation();
// Step 6: Retrieve results
List<Cloudlet> newList = broker.getCloudletReceivedList();
CloudSim.stopSimulation();
// Print results
printCloudletResults(newList);
} catch (Exception e) {
e.printStackTrace();
}
}
private static Datacenter createDatacenter(String name) throws Exception {
// List of hosts
List<Host> hostList = new ArrayList<>();
// Create a single processing element (PE)
List<Pe> peList = new ArrayList<>();
int mips = 1000;
peList.add(new Pe(0, new PeProvisionerSimple(mips))); // Create PEs and add to list
// Create Host with its characteristics
int hostId = 0;
int ram = 2048; // Host memory (MB)
long storage = 1000000; // Host storage
int bw = 10000;
Host host = new Host(
hostId,
new RamProvisionerSimple(ram),
new BwProvisionerSimple(bw),
storage,
peList,
new VmSchedulerTimeShared(peList)
);
hostList.add(host); // Add the host to the list
// Datacenter characteristics
String arch = "x86"; // System architecture
String os = "Linux"; // Operating system
String vmm = "Xen";
double timeZone = 10.0; // Time zone this resource is located
double costPerSec = 3.0; // Cost per second
double costPerMem = 0.05; // Cost per memory
double costPerStorage = 0.001; // Cost per storage
double costPerBw = 0.0; // Cost per bandwidth
DatacenterCharacteristics characteristics = new DatacenterCharacteristics(
arch, os, vmm, hostList, timeZone, costPerSec, costPerMem, costPerStorage, costPerBw);
// Create Datacenter with defined characteristics
return new Datacenter(name, characteristics, new VmAllocationPolicySimple(hostList), new
LinkedList<>(), 0);
}
private static DatacenterBroker createBroker() throws Exception {
return new DatacenterBroker("Broker");
}
private static List<Vm> createVMs(int brokerId, int numVMs) {
List<Vm> vms = new ArrayList<>();
int mips = 1000;
long size = 10000; // Image size (MB)
int ram = 512; // VM memory (MB)
int bw = 1000;
int pesNumber = 1; // Number of CPUs
String vmm = "Xen"; // VMM name
for (int i = 0; i < numVMs; i++) {
Vm vm = new Vm(i, brokerId, mips, pesNumber, ram, bw, size, vmm, new
CloudletSchedulerTimeShared());
vms.add(vm);
}
return vms;
}
private static List<Cloudlet> createCloudlets(int brokerId, int numCloudlets) {
List<Cloudlet> cloudlets = new ArrayList<>();
long length = 40000;
long fileSize = 300;
long outputSize = 300;
int pesNumber = 1;
UtilizationModel utilizationModel = new UtilizationModelFull();
for (int i = 0; i < numCloudlets; i++) {
Cloudlet cloudlet = new Cloudlet(i, length, pesNumber, fileSize, outputSize, utilizationModel,
utilizationModel, utilizationModel);
cloudlet.setUserId(brokerId);
cloudlets.add(cloudlet);
}
return cloudlets;
}
private static void printCloudletResults(List<Cloudlet> list) {
String indent = " ";
System.out.println("========== OUTPUT ==========");
System.out.println("Cloudlet ID" + indent + "STATUS" + indent +
"Data center ID" + indent + "VM ID" + indent + "Time" + indent + "Start Time" + indent + "Finish
Time");
for (Cloudlet cloudlet : list) {
if (cloudlet.getStatus() == Cloudlet.SUCCESS) {
System.out.println(cloudlet.getCloudletId() + indent + "SUCCESS" + indent +
cloudlet.getResourceId() + indent + indent + cloudlet.getVmId() +
indent + cloudlet.getActualCPUTime() +
indent + cloudlet.getExecStartTime() + indent + cloudlet.getFinishTime());
}
}
}
}
